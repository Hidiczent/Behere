// src/components/ChatChanel/ReportModal.tsx
import { useState } from "react";
import { api } from "../../service/api";
import { useAuth } from "../../context/AuthContext";

type Props = {
  open: boolean;
  onClose: () => void;
  conversationId: number | null;
  // reportedUserId?: number | null; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ù‡∏±‡πà‡∏á BE ‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡πÄ‡∏≠‡∏á
};

type TabKey = "rate" | "report";
type ReportReason = "spam" | "harassment" | "other";

export default function ReportModal({ open, onClose, conversationId }: Props) {
  const { authed } = useAuth();
  const [tab, setTab] = useState<TabKey>("rate");

  // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const [rating, setRating] = useState<number>(0);
  const [hover, setHover] = useState<number>(0);
  const [feedback, setFeedback] = useState("");

  // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  const [reason, setReason] = useState<ReportReason>("spam");
  const [detail, setDetail] = useState("");

  // loading
  const [submitting, setSubmitting] = useState(false);

  if (!open) return null;

  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.target === e.currentTarget) handleClose();
  };

  const handleClose = () => {
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î
    setRating(0);
    setHover(0);
    setFeedback("");
    setReason("spam");
    setDetail("");
    onClose();
  };

  const ensureConversationId = () => {
    const cid = Number(conversationId);
    if (!cid || Number.isNaN(cid)) {
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (conversationId)");
      return null;
    }
    return cid;
  };

  const submitRating = async () => {
    if (submitting) return;
    if (!authed) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô");
      return;
    }
    const cid = ensureConversationId();
    if (!cid) return;

    if (rating < 1 || rating > 5) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1‚Äì5 ‡∏î‡∏≤‡∏ß");
      return;
    }

    try {
      setSubmitting(true);
      const res = await api.post("/ratings", {
        conversationId: cid,
        rating,
        feedback: feedback?.trim() || undefined,
      });

      if (res.data?.ok) {
        alert("‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à‡∫™‡∫≥‡∫´‡∫º‡∫±‡∫ö‡∫Ñ‡∫≥‡∫ï‡∫¥‡∫ä‡∫ª‡∫° üôè");
        handleClose();
      } else {
        alert(res.data?.error || "‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î");
      }
    } catch (err: any) {
      const status = err?.response?.status;
      const data = err?.response?.data;

      if (status === 404) {
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (/ratings) ‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
        return;
      }
      if (status === 401) {
        alert("UNAUTHORIZED: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        return;
      }
      if (status === 400 && data?.error === "VALIDATION_ERROR") {
        alert(
          `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${JSON.stringify(data.details ?? {}, null, 2)}`
        );
        return;
      }
      if (status === 400 && data) console.warn("RATING 400 ‚Üí", data);

      const msg =
        data?.error || err?.message || "‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà‡∫≠‡∫µ‡∫Å‡∫Ñ‡∫±‡ªâ‡∫á";
      if (msg === "CONVERSATION_NOT_ENDED") {
        alert("‡∫´‡ªâ‡∫≠‡∫á‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫à‡∫ª‡∫ö ‡∫à‡∫∂‡ªà‡∫á‡∫ç‡∫±‡∫á‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ");
      } else if (msg === "NOT_IN_CONVERSATION") {
        alert("‡∫ö‡∫±‡∫ô‡∫ä‡∫µ‡∫ô‡∫µ‡ªâ‡∫ö‡ªç‡ªà‡∫¢‡∫π‡ªà‡ªÉ‡∫ô‡∫´‡ªâ‡∫≠‡∫á‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤‡∫ô‡∫µ‡ªâ");
      } else if (msg === "MISSING_PARAMS") {
        alert("‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫Ñ‡∫ª‡∫ö: conversationId / rating");
      } else if (msg === "INVALID_RATING") {
        alert("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1‚Äì5)");
      } else {
        alert(msg);
      }
    } finally {
      setSubmitting(false);
    }
  };

  const submitReport = async () => {
    if (submitting) return;
    if (!authed) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô");
      return;
    }
    const cid = ensureConversationId();
    if (!cid) return;

    try {
      setSubmitting(true);
      const res = await api.post("/reports", {
        conversationId: cid,
        reason,
        detail: detail?.trim() || undefined,
      });

      if (res.data?.ok) {
        alert("‡∫™‡∫ª‡ªà‡∫á‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß ‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à‡∫ó‡∫µ‡ªà‡ªÅ‡∫à‡ªâ‡∫á‡ªÉ‡∫´‡ªâ üôè");
        handleClose();
      } else {
        alert(res.data?.error || "‡∫™‡∫ª‡ªà‡∫á‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î");
      }
    } catch (err: any) {
      const status = err?.response?.status;
      const data = err?.response?.data;

      if (status === 404) {
        alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (/reports) ‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
        return;
      }
      if (status === 401) {
        alert("UNAUTHORIZED: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        return;
      }
      if (status === 400 && data?.error === "VALIDATION_ERROR") {
        alert(
          `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${JSON.stringify(data.details ?? {}, null, 2)}`
        );
        return;
      }
      if (status === 400 && data) console.warn("REPORT 400 ‚Üí", data);

      const msg =
        data?.error || err?.message || "‡∫™‡∫ª‡ªà‡∫á‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà‡∫≠‡∫µ‡∫Å‡∫Ñ‡∫±‡ªâ‡∫á";
      if (msg === "NOT_IN_CONVERSATION") {
        alert("‡∫ö‡∫±‡∫ô‡∫ä‡∫µ‡∫ô‡∫µ‡ªâ‡∫ö‡ªç‡ªà‡∫¢‡∫π‡ªà‡ªÉ‡∫ô‡∫´‡ªâ‡∫≠‡∫á‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤‡∫ô‡∫µ‡ªâ");
      } else if (msg === "CONVERSATION_NOT_FOUND") {
        alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ô‡∏µ‡πâ");
      } else if (msg === "CONVERSATION_NOT_ENDED") {
        alert("‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ‡∏´‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö");
      } else if (msg === "MISSING_PARAMS") {
        alert("‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫Ñ‡∫ª‡∫ö: conversationId / reason");
      } else {
        alert(msg);
      }
    } finally {
      setSubmitting(false);
    }
  };

  const Star = ({ index }: { index: number }) => {
    const active = (hover || rating) >= index;
    return (
      <button
        type="button"
        aria-label={`${index} ‡∫î‡∫≤‡∫ß`}
        onClick={() => setRating(index)}
        onMouseEnter={() => setHover(index)}
        onMouseLeave={() => setHover(0)}
        className="text-3xl transition-transform active:scale-95"
        disabled={submitting}
      >
        <span className={active ? "text-yellow-500" : "text-slate-300"}>‚òÖ</span>
      </button>
    );
  };

  return (
    <div
      className="fixed inset-0 z-50 grid place-items-center bg-black/30"
      onMouseDown={handleOverlayClick}
    >
      <div
        className="w-full max-w-lg rounded-2xl bg-white p-0 shadow"
        role="dialog"
        aria-modal="true"
        onMouseDown={(e) => e.stopPropagation()}
      >
        {/* Header Tabs */}
        <div className="px-6 pt-5">
          <h3 className="text-lg font-bold">‡∫à‡∫ª‡∫ö‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤</h3>
          <p className="text-sm text-slate-600">‡∫ä‡ªà‡∫ß‡∫ç‡∫ö‡∫≠‡∫Å‡ªÄ‡∫Æ‡∫ª‡∫≤‡ªÅ‡∫ô‡ªà‡ªÑ‡∫î‡ªâ‡∫ö‡ªç‡ªà?</p>
        </div>

        <div className="mt-4 px-3">
          <div
            className="grid grid-cols-2 gap-2 rounded-xl bg-slate-100 p-1"
            role="tablist"
            aria-label="Rate or Report"
          >
            <button
              role="tab"
              aria-selected={tab === "rate"}
              className={[
                "rounded-lg px-4 py-2 text-sm font-medium transition",
                tab === "rate" ? "bg-white shadow" : "text-slate-600",
              ].join(" ")}
              onClick={() => setTab("rate")}
              disabled={submitting}
            >
              ‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô
            </button>
            <button
              role="tab"
              aria-selected={tab === "report"}
              className={[
                "rounded-lg px-4 py-2 text-sm font-medium transition",
                tab === "report" ? "bg-white shadow" : "text-slate-600",
              ].join(" ")}
              onClick={() => setTab("report")}
              disabled={submitting}
            >
              ‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô
            </button>
          </div>
        </div>

        {/* Body */}
        <div className="px-6 py-5">
          {tab === "rate" ? (
            <div>
              <p className="mb-3 text-sm text-slate-700">
                ‡∫õ‡∫∞‡∫™‡∫ª‡∫ö‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤‡∫Ñ‡∫±‡ªâ‡∫á‡∫ô‡∫µ‡ªâ‡ªÄ‡∫õ‡∫±‡∫ô‡ªÅ‡∫ô‡∫ß‡ªÉ‡∫î‡ªÅ‡∫ô‡ªà ?
              </p>

              {/* Stars */}
              <div className="mb-4 flex items-center gap-2">
                {[1, 2, 3, 4, 5].map((i) => (
                  <Star key={i} index={i} />
                ))}
                <span className="ml-2 text-sm text-slate-600">
                  {rating ? `${rating}/5` : "‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô"}
                </span>
              </div>

              <textarea
                className="w-full rounded-xl border p-3 text-sm"
                rows={4}
                placeholder="‡∫Ç‡∫Ω‡∫ô‡∫Ñ‡∫≥‡∫ï‡∫¥‡∫ä‡∫ª‡∫° (‡∫ö‡ªç‡ªà‡∫ö‡∫±‡∫á‡∫Ñ‡∫±‡∫ö)"
                value={feedback}
                onChange={(e) => setFeedback(e.target.value)}
                disabled={submitting}
              />
            </div>
          ) : (
            <div>
              <p className="mb-3 text-sm text-slate-700">
                ‡∫ö‡∫≠‡∫Å‡ªÄ‡∫´‡∫î‡∫ú‡∫ª‡∫ô‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫Ñ‡∫π‡ªà‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤
              </p>

              <div className="space-y-3 mb-4">
                {(["spam", "harassment", "other"] as ReportReason[]).map(
                  (r) => (
                    <label key={r} className="flex items-center gap-2">
                      <input
                        type="radio"
                        name="reason"
                        value={r}
                        checked={reason === r}
                        onChange={() => setReason(r)}
                        disabled={submitting}
                      />
                      <span>
                        {r === "spam"
                          ? "‡∫™‡∫∞‡ªÅ‡∫õ‡∫°/‡∫Å‡∫ß‡∫ô"
                          : r === "harassment"
                          ? "‡∫Ñ‡∫∏‡∫Å‡∫Ñ‡∫≤‡∫°/‡∫Ç‡ªç‡ªâ‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ö‡ªç‡ªà‡ªÄ‡ªù‡∫≤‡∫∞‡∫™‡∫ª‡∫°"
                          : "‡∫≠‡∫∑‡ªà‡∫ô ‡ªÜ"}
                      </span>
                    </label>
                  )
                )}
              </div>

              <textarea
                className="w-full rounded-xl border p-3 text-sm"
                rows={4}
                placeholder="‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡ªÄ‡∫û‡∫¥‡ªà‡∫°‡ªÄ‡∫ï‡∫¥‡∫° (‡∫ö‡ªç‡ªà‡∫ö‡∫±‡∫á‡∫Ñ‡∫±‡∫ö)"
                value={detail}
                onChange={(e) => setDetail(e.target.value)}
                disabled={submitting}
              />
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between gap-3 border-t px-6 py-4">
          <button
            onClick={handleClose}
            className="px-4 py-2 rounded-xl border text-sm font-medium"
            disabled={submitting}
          >
            ‡∫ö‡ªç‡ªà‡ªÅ‡∫°‡ªà‡∫ô‡∫ï‡∫≠‡∫ô‡∫ô‡∫µ‡ªâ
          </button>

          {tab === "rate" ? (
            <button
              onClick={submitRating}
              disabled={submitting || rating === 0}
              className="px-4 py-2 rounded-xl bg-primary text-white text-sm font-medium disabled:opacity-50"
            >
              {submitting ? "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡ªà‡∫á..." : "‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô"}
            </button>
          ) : (
            <button
              onClick={submitReport}
              disabled={submitting}
              className="px-4 py-2 rounded-xl bg-red-500 text-white text-sm font-medium disabled:opacity-50"
            >
              {submitting ? "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡ªà‡∫á..." : "‡∫™‡∫ª‡ªà‡∫á‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô"}
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

// src/components/ChatChanel/ChatChanel.tsx
import React, { useEffect, useMemo, useRef, useState } from "react";
import type { Message, Role } from "../../types/Message";
import MessageBubble from "./MessageBubble";
import MatchingScreen from "./MatchingScreen";
import ConfirmEndModal from "../Alert/ConfirmEndModal";
import ReportModal from "./ReportModal";
import { useSearchParams, Link } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

// ---------- URL helpers ----------
const API_BASE =
  (import.meta.env.VITE_API_BASE_URL as string) || "http://localhost:5050";

function makeWsBase(httpBase: string) {
  const u = new URL(httpBase, window.location.origin);
  const proto = u.protocol === "https:" ? "wss:" : "ws:";
  return `${proto}//${u.host}`;
}
const WS_BASE = makeWsBase(API_BASE);

// ---------- roles ----------
const roleMap: Record<Role, "talker" | "listener"> = {
  venter: "talker",
  listener: "listener",
};

// ---------- debug ----------
const DBG = import.meta.env.VITE_DEBUG_WS === "1";
const wsStateName = (s: number) =>
  s === WebSocket.CONNECTING
    ? "CONNECTING(0)"
    : s === WebSocket.OPEN
    ? "OPEN(1)"
    : s === WebSocket.CLOSING
    ? "CLOSING(2)"
    : s === WebSocket.CLOSED
    ? "CLOSED(3)"
    : `UNKNOWN(${s})`;

declare global {
  interface Window {
    __ws?: WebSocket;
  }
}

// ‡∏á‡∏î‡∏£‡∏µ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ô‡πá‡∏Å‡∏ï‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
let SUPPRESS_RECONNECT_UNTIL = 0;

// ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ (‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™ cookie ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô WS)
function getCookie(name: string) {
  const m = document.cookie.match(new RegExp("(^| )" + name + "=([^;]+)"));
  return m ? decodeURIComponent(m[2]) : "";
}

export default function ChatBubbles() {
  const { authed, loading } = useAuth();

  const [sp] = useSearchParams();
  const initialRole = (sp.get("role") as Role) || "venter";

  const [role] = useState<Role>(initialRole);
  const [text, setText] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [connected, setConnected] = useState(false);
  const [conversationId, setConversationId] = useState<number | null>(null);
  const [myUid, setMyUid] = useState<number | null>(null);
  const [queuing, setQueuing] = useState(false);

  // ‚úÖ ‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏Ñ‡∏¥‡∏ß: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ auto (‡πÄ‡∏à‡∏≠‡∏Ñ‡∏π‡πà‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢) ‡πÅ‡∏ï‡πà ‚Äú‡∏û‡∏≠‡∏à‡∏ö‡∏´‡πâ‡∏≠‡∏á‚Äù ‡∏à‡∏∞‡∏õ‡∏¥‡∏î auto
  const [autoQueueEnabled, setAutoQueueEnabled] = useState(true);

  // ‡πÇ‡∏°‡∏î‡∏±‡∏•
  const [showEndConfirm, setShowEndConfirm] = useState(false);
  const [showReport, setShowReport] = useState(false);
  const [lastConversationId, setLastConversationId] = useState<number | null>(
    null
  );
  const [peerId, setPeerId] = useState<number | null>(null);

  // ‡∏Ñ‡∏∏‡∏°‡∏£‡∏≠‡∏ö‡∏£‡∏µ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ô‡πá‡∏Å‡∏ï‡πå
  const [wsVersion, setWsVersion] = useState(0);

  const listRef = useRef<HTMLDivElement>(null);
  const wsRef = useRef<WebSocket | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement | null>(null);

  // refs ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ state ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ event handler
  const roleRef = useRef<Role>(role);
  const myUidRef = useRef<number | null>(null);
  const conversationIdRef = useRef<number | null>(null);
  const showReportRef = useRef<boolean>(false);

  useEffect(() => {
    roleRef.current = role;
  }, [role]);
  useEffect(() => {
    myUidRef.current = myUid;
  }, [myUid]);
  useEffect(() => {
    conversationIdRef.current = conversationId;
  }, [conversationId]);
  useEffect(() => {
    showReportRef.current = showReport;
  }, [showReport]);

  // auto scroll (‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà)
  useEffect(() => {
    const el = listRef.current;
    if (!el) return;
    el.scrollTo({ top: el.scrollHeight, behavior: "smooth" });
  }, [messages.length]);

  // textarea auto-resize (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ~6 ‡πÅ‡∏ñ‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå)
  useEffect(() => {
    const ta = textareaRef.current;
    if (!ta) return;
    ta.style.height = "auto";
    const lineHeight = 24;
    const max = lineHeight * 6;
    ta.style.height = Math.min(ta.scrollHeight, max) + "px";
    ta.style.overflowY = ta.scrollHeight > max ? "auto" : "hidden";
  }, [text]);

  const canSend = useMemo(
    () => text.trim().length > 0 && !!conversationId,
    [text, conversationId]
  );

  // ---------- helper: log ----------
  const SID = useRef(Math.random().toString(36).slice(2, 8));
  const d = (...a: unknown[]) => {
    if (!DBG) return;
    console.log(`[FE][${SID.current}]`, ...a);
  };

  // ---------- ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß (‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î/‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ô‡πá‡∏Å‡∏ï‡πå) ----------
  const sendJoinSafe = (tag = "manual") => {
    const ws = wsRef.current;
    if (!ws || ws.readyState !== WebSocket.OPEN) {
      d(
        "sendJoinSafe ‚Üí ws not OPEN:",
        ws ? wsStateName(ws.readyState) : "null"
      );
      return;
    }
    const payload = { type: "QUEUE_JOIN", role: roleMap[roleRef.current] };
    ws.send(JSON.stringify(payload));
    setQueuing(true);
    d("SEND QUEUE_JOIN", tag, payload);
  };

  // ---------- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö/‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä ‡πÅ‡∏•‡∏∞‡∏Å‡∏î Back ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à ----------
  // beforeunload: ‡πÅ‡∏™‡∏î‡∏á native confirm ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå + ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äú‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠‚Äù ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏à‡∏ö‡∏´‡πâ‡∏≠‡∏á
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (conversationIdRef.current) {
        setShowEndConfirm(true); // ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î ‚Äú‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠‚Äù
        e.preventDefault();
        e.returnValue = "";
      }
    };
    window.addEventListener("beforeunload", handleBeforeUnload);
    return () => window.removeEventListener("beforeunload", handleBeforeUnload);
  }, []);

  // popstate: ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏° Back ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  useEffect(() => {
    const pushHere = () => {
      try {
        history.pushState(null, "", location.href);
      } catch {
        console.log("error pushing state");
      }
    };
    // ‡πÉ‡∏™‡πà sentinel ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤/‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á
    if (conversationId) pushHere();

    const onPop = (e: PopStateEvent) => {
      if (conversationIdRef.current) {
        e.preventDefault?.();
        setShowEndConfirm(true);
        // ‡∏î‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        pushHere();
      }
    };
    window.addEventListener("popstate", onPop);
    return () => window.removeEventListener("popstate", onPop);
  }, [conversationId]);

  // ---------- ‡πÄ‡∏õ‡∏¥‡∏î/‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° WebSocket ----------
  useEffect(() => {
    if (loading || !authed) {
      d("skip WS (auth loading or not authed)", { loading, authed });
      return;
    }
    if (Date.now() < SUPPRESS_RECONNECT_UNTIL) {
      d("suppress reconnect window");
      return;
    }
    if (
      wsRef.current &&
      (wsRef.current.readyState === WebSocket.CONNECTING ||
        wsRef.current.readyState === WebSocket.OPEN)
    ) {
      d("reuse WS", wsStateName(wsRef.current.readyState));
      return;
    }

    const token = getCookie("token");
    const url = `${WS_BASE}/ws${
      token ? `?token=${encodeURIComponent(token)}` : ""
    }`;
    d("create WS v", wsVersion, url);
    const ws = new WebSocket(url);
    window.__ws = ws;
    wsRef.current = ws;

    const onOpen = () => {
      if (wsRef.current !== ws) {
        d("OPEN from stale ws -> ignore");
        return;
      }
      setConnected(true);
      d("WS OPEN");
      // üö´ ‡πÑ‡∏°‡πà auto-queue ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏´‡πâ‡∏≠‡∏á)
      if (autoQueueEnabled && !conversationIdRef.current) {
        sendJoinSafe("open");
        setTimeout(() => sendJoinSafe("retry300ms"), 300);
      }
    };

    const onClose = (e: CloseEvent) => {
      if (wsRef.current !== ws) {
        d("CLOSE from stale ws -> ignore");
        return;
      }
      const reason = e.reason || "";
      const code = e.code;
      d("WS CLOSE", code, reason || "(no reason)");
      setConnected(false);
      setQueuing(false);
      wsRef.current = null;
      if (code === 4004 || /Reconnected|Replaced/i.test(reason)) {
        SUPPRESS_RECONNECT_UNTIL = Date.now() + 2000;
        d("suppress reconnect for 2s due to replacement");
        return;
      }
      setTimeout(() => setWsVersion((v) => v + 1), 600);
    };

    const onError = (e: Event) => {
      if (wsRef.current !== ws) return;
      d("WS ERROR", e);
    };

    const onMessage = (ev: MessageEvent) => {
      if (wsRef.current !== ws) {
        d("MESSAGE from stale ws -> ignore");
        return;
      }
      let msg;
      try {
        msg = JSON.parse(ev.data);
      } catch (err) {
        d("PARSE ERROR", err, ev.data);
        return;
      }
      d("RECV", msg?.type, msg);

      switch (msg.type) {
        case "REPLACED":
          SUPPRESS_RECONNECT_UNTIL = Date.now() + 3000;
          d("REPLACED ‚Üí suppress reconnect 3s");
          break;

        case "HELLO":
          setMyUid(msg.uid);
          break;

        case "QUEUED":
          setQueuing(true);
          break;

        case "MATCH_FOUND":
          setConversationId(msg.conversationId);
          setLastConversationId(msg.conversationId);
          setPeerId(null);
          setQueuing(false);
          setAutoQueueEnabled(true);

          // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏™‡πà system message
          setMessages([
            {
              id: crypto.randomUUID(),
              system: true,
              text: "‡∫à‡∫±‡∫ö‡∫Ñ‡∫π‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î! ‚ú®",
              time: Date.now(),
            },
          ]);
          break;

        case "MESSAGE_NEW": {
          const mine = msg.from === myUidRef.current;
          if (!mine && typeof msg.from === "number") setPeerId(msg.from);
          setMessages((prev) => [
            ...prev,
            {
              id: crypto.randomUUID(),
              mine,
              role: mine
                ? roleRef.current
                : roleRef.current === "venter"
                ? "listener"
                : "venter",
              text: String(msg.text ?? ""),
              time: typeof msg.at === "number" ? msg.at : Date.now(),
            },
          ]);
          break;
        }

        case "CONVERSATION_ENDED":
        case "PARTNER_DISCONNECTED":
          setMessages((prev) => [
            ...prev,
            {
              id: crypto.randomUUID(),
              system: true,
              text: "‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡ªÅ‡∫•‡ªâ‡∫ß",
              time: Date.now(),
            },
          ]);
          if (typeof msg.conversationId === "number")
            setLastConversationId(msg.conversationId);
          setConversationId(null);
          setQueuing(false);
          setAutoQueueEnabled(false); // üîí ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏Ñ‡∏¥‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏´‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡πÄ‡∏≠‡∏á
          if (!showReportRef.current) setShowReport(true);
          break;

        case "ERROR":
          setMessages((prev) => [
            ...prev,
            {
              id: crypto.randomUUID(),
              system: true,
              text: `‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ${msg.message}`,
              time: Date.now(),
            },
          ]);
          break;

        default:
          d("UNKNOWN MESSAGE TYPE", msg);
      }
    };

    ws.addEventListener("open", onOpen);
    ws.addEventListener("close", onClose);
    ws.addEventListener("error", onError);
    ws.addEventListener("message", onMessage);

    return () => {
      d("cleanup WS");
      if (wsRef.current === ws) {
        try {
          ws.close();
        } catch {
          console.log("error closing ws");
        }
        wsRef.current = null;
      }
      ws.removeEventListener("open", onOpen);
      ws.removeEventListener("close", onClose);
      ws.removeEventListener("error", onError);
      ws.removeEventListener("message", onMessage);
    };
  }, [role, authed, loading, wsVersion, autoQueueEnabled]);

  // Heartbeat: ‡∏™‡πà‡∏á QUEUE_JOIN ‡∏ã‡πâ‡∏≥ ‡πÜ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô ‚Äú‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ auto ‡∏Ñ‡∏¥‡∏ß‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  useEffect(() => {
    if (!authed || !connected || conversationId || !autoQueueEnabled) return;
    const id = setInterval(() => sendJoinSafe("heartbeat"), 1500);
    return () => clearInterval(id);
  }, [authed, connected, conversationId, role, autoQueueEnabled]);

  // ‡∏´‡∏•‡∏∏‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Üí ‡∏õ‡∏¥‡∏î WS
  useEffect(() => {
    if (!authed && wsRef.current) {
      d("Auth lost ‚Üí force close WS");
      try {
        wsRef.current.close(4000, "Auth required");
      } catch {
        console.log("error");
      }
      wsRef.current = null;
      setConnected(false);
      setConversationId(null);
      setQueuing(false);
      setAutoQueueEnabled(false);
    }
  }, [authed]);

  function handleSend() {
    if (!canSend || !wsRef.current || !conversationId) return;
    const payload = {
      type: "MESSAGE",
      conversationId: Number(conversationId),
      text: text.trim(),
    };
    wsRef.current.send(JSON.stringify(payload));
    d("SEND MESSAGE", payload);
    setText("");
  }

  function onClickEnd() {
    if (!conversationId) return;
    d("CLICK End ‚Üí open confirm modal");
    setShowEndConfirm(true);
  }

  function confirmEndNow() {
    if (!wsRef.current || !conversationId) return;
    const cid = Number(conversationId);
    setLastConversationId(cid);

    // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô + ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    setShowEndConfirm(false);
    setShowReport(true);

    // ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optimistic)
    setConversationId(null);
    setQueuing(false);
    setAutoQueueEnabled(false);

    // ‡∏™‡πà‡∏á END ‡πÑ‡∏õ BE
    wsRef.current.send(JSON.stringify({ type: "END", conversationId: cid }));
    d("SEND END", { conversationId: cid });
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    const ne = e.nativeEvent as KeyboardEvent; // DOM KeyboardEvent

    // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á IME ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡πÑ‡∏ó‡∏¢/‡∏•‡∏≤‡∏ß/‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô ‡∏Ø‡∏•‡∏Ø)
    if (ne.isComposing || e.key === "Process" || ne.keyCode === 229) return;

    if (
      e.key === "Enter" &&
      !e.shiftKey &&
      !e.ctrlKey &&
      !e.metaKey &&
      !e.altKey
    ) {
      e.preventDefault();
      handleSend();
    }
  }

  const matched = !!conversationId;

  if (loading) return null;

  if (!authed) {
    const redirect = encodeURIComponent(
      window.location.pathname + window.location.search
    );
    d("Not authed ‚Üí show login card");
    return (
      <section className="min-h-[60vh] grid place-items-center p-6">
        <div className="max-w-md w-full rounded-2xl border bg-white p-6 text-center">
          <h2 className="text-xl font-bold mb-2">‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫Å‡ªà‡∫≠‡∫ô</h2>
          <p className="text-slate-600 mb-5">
            ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫à‡∫±‡∫ö‡∫Ñ‡∫π‡ªà‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞
          </p>
          <Link
            to={`/login?redirect=${redirect}`}
            className="inline-block rounded-xl bg-primary text-white px-5 py-3 font-medium"
          >
            ‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫•‡∫∞‡∫ö‡∫ª‡∫ö
          </Link>
        </div>
      </section>
    );
  }

  return (
    <>
      {matched ? (
        // ======= ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó =======
        <div className="min-h-[70vh] max-w-4xl mx-auto p-4 flex flex-col gap-3 font-laoLooped">
          <header className="flex items-center justify-between bg-white/70 backdrop-blur rounded-2xl shadow p-4">
            <div className="flex items-center gap-3">
              <span className="text-xl font-bold">‡∫´‡ªâ‡∫≠‡∫á‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤‡ªÉ‡∫´‡ªâ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÉ‡∫à</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-600">
              <span className="rounded-full px-2 py-1 bg-primary text-secondary">
                {label(role)}
              </span>
              <span
                className={`rounded-full px-2 py-1 ${
                  conversationId
                    ? "bg-green-500 text-white"
                    : connected
                    ? "bg-yellow-400 text-black"
                    : "bg-red-500 text-white"
                }`}
              >
                {conversationId
                  ? "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤"
                  : connected
                  ? "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫à‡∫±‡∫ö‡∫Ñ‡∫π‡ªà"
                  : "‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà"}
              </span>
            </div>
          </header>

          {/* ‚úÖ ‡πÇ‡∏ã‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà + ‡∏°‡∏µ‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô */}
          <div
            ref={listRef}
            className="h-[55vh] max-h-[65vh] overflow-y-auto scroll-smooth bg-neutral-50 rounded-2xl p-3 border border-neutral-200 space-y-3"
          >
            {messages.map((m) => (
              <MessageBubble key={m.id} msg={m} />
            ))}
          </div>

          {/* ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå: textarea auto-resize + ‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß */}
          <div className="bg-white rounded-2xl shadow p-3 border border-neutral-200">
            <div className="flex flex-col sm:flex-row gap-3 items-stretch">
              <textarea
                ref={textareaRef}
                rows={1}
                className="flex-1 rounded-xl border border-neutral-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary/40 resize-none max-h-32 overflow-y-auto"
                placeholder="‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á (Shift+Enter ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)"
                value={text}
                onChange={(e) => setText(e.target.value)}
                onKeyDown={handleKeyDown}
                disabled={!conversationId}
              />
              <div className="flex gap-2">
                <button
                  onClick={handleSend}
                  disabled={!canSend}
                  className="rounded-xl px-5 py-3 font-medium shadow disabled:opacity-40 disabled:cursor-not-allowed bg-primary text-white hover:opacity-90"
                >
                  ‡∫™‡∫ª‡ªà‡∫á‡∫Ç‡ªç‡ªâ‡∫Ñ‡∫ß‡∫≤‡∫°
                </button>
                <button
                  onClick={onClickEnd}
                  disabled={!conversationId}
                  className="rounded-xl px-4 py-3 font-medium shadow disabled:opacity-40 disabled:cursor-not-allowed border"
                >
                  ‡∫à‡∫ª‡∫ö‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡∫ô‡∫ó‡∫∞‡∫ô‡∫≤
                </button>
              </div>
            </div>
          </div>
        </div>
      ) : (
        // ======= ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà =======
        <MatchingScreen
          role={role}
          connected={connected}
          queuing={queuing}
          onRetry={() => {
            // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î ‚Äú‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‚Äù ‡πÄ‡∏≠‡∏á -> ‡πÄ‡∏õ‡∏¥‡∏î auto ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ JOIN
            setAutoQueueEnabled(true);
            sendJoinSafe("retry-button");
          }}
          onCancel={() => {
            d("Click cancel matching");
            setAutoQueueEnabled(false); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
            if (wsRef.current?.readyState === WebSocket.OPEN) {
              wsRef.current.send(JSON.stringify({ type: "QUEUE_LEAVE" }));
              d("SEND QUEUE_LEAVE");
            }
            history.back();
          }}
        />
      )}

      {/* ‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏ö */}
      <ConfirmEndModal
        open={showEndConfirm}
        onCancel={() => {
          d("Close confirm modal");
          setShowEndConfirm(false);
        }}
        onConfirm={confirmEndNow}
      />

      {/* ‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ‚ùå ‡πÑ‡∏°‡πà auto requeue ‡πÅ‡∏•‡πâ‡∏ß */}
      <ReportModal
        open={showReport}
        onClose={() => {
          d("Report modal closed");
          setShowReport(false);
          setAutoQueueEnabled(false); // ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ ‚Äú‡∏Å‡∏î‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‚Äù ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
          setQueuing(false);
        }}
        conversationId={lastConversationId}
        reportedUserId={peerId ?? undefined}
      />
    </>
  );
}

function label(r: Role) {
  return r === "venter" ? "‡∫ú‡∫π‡ªâ‡∫•‡∫∞‡∫ö‡∫≤‡∫ç" : "‡∫ú‡∫π‡ªâ‡∫Æ‡∫±‡∫ö‡∫ü‡∫±‡∫á";
}
